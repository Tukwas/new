/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package brainbox;

import java.io.FileReader;
import java.io.FileWriter;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class AccountAccess extends javax.swing.JFrame {
    
    private static final String filepath= "C:\\Users\\User\\Documents\\NetBeansProjects\\brainBox\\src\\brainbox\\DataBase\\Bash.json";
    private JSONArray braineers;

    public AccountAccess() {
        initComponents();
        loadAccounts();
        addLiveSearch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Accountaccess = new keeptoo.KGradientPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        leaderboardTable1 = new javax.swing.JTable();
        search2 = new javax.swing.JButton();
        find4 = new javax.swing.JTextField();
        ban = new javax.swing.JButton();
        del1 = new javax.swing.JButton();
        title = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Accountaccess.setkEndColor(new java.awt.Color(206, 92, 165));
        Accountaccess.setkStartColor(new java.awt.Color(240, 122, 46));

        leaderboardTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Password"
            }
        ));
        leaderboardTable1.setRowHeight(30);
        leaderboardTable1.setSelectionBackground(new java.awt.Color(255, 153, 51));
        leaderboardTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(leaderboardTable1);

        search2.setText("Search");
        search2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search2ActionPerformed(evt);
            }
        });

        find4.setText("Find Someone Here...");

        ban.setText("Deactivate");
        ban.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                banActionPerformed(evt);
            }
        });

        del1.setText("Delete");
        del1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del1ActionPerformed(evt);
            }
        });

        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Account Access");

        javax.swing.GroupLayout AccountaccessLayout = new javax.swing.GroupLayout(Accountaccess);
        Accountaccess.setLayout(AccountaccessLayout);
        AccountaccessLayout.setHorizontalGroup(
            AccountaccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountaccessLayout.createSequentialGroup()
                .addGroup(AccountaccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AccountaccessLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AccountaccessLayout.createSequentialGroup()
                        .addContainerGap(105, Short.MAX_VALUE)
                        .addGroup(AccountaccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(AccountaccessLayout.createSequentialGroup()
                                .addComponent(find4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(search2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(del1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ban)))
                        .addGap(177, 177, 177)))
                .addContainerGap())
        );

        AccountaccessLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ban, del1, search2});

        AccountaccessLayout.setVerticalGroup(
            AccountaccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AccountaccessLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(AccountaccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ban, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AccountaccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(search2)
                        .addComponent(del1)
                        .addComponent(find4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                .addContainerGap())
        );

        AccountaccessLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ban, del1, search2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(Accountaccess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 551, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(Accountaccess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void search2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search2ActionPerformed
        searchAccount();
    }//GEN-LAST:event_search2ActionPerformed

    private void del1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del1ActionPerformed
       deleteAccount();
    }//GEN-LAST:event_del1ActionPerformed

    private void banActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_banActionPerformed
        sortAccounts();
    }//GEN-LAST:event_banActionPerformed

     private void loadAccounts() {
        try (FileReader reader = new FileReader(filepath)) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONObject users = (JSONObject) data.get("users");
            braineers = (JSONArray) users.get("brainer");

            DefaultTableModel model = (DefaultTableModel) leaderboardTable1.getModel();
            model.setRowCount(0);
            for (Object obj : braineers) {
                JSONObject user = (JSONObject) obj;
                model.addRow(new Object[]{user.get("username"), user.get("points")});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading accounts: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addLiveSearch() {
        find4.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                liveSearch();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                liveSearch();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                liveSearch();
            }

            private void liveSearch() {
                String searchTerm = find4.getText().trim().toLowerCase();

                List<JSONObject> filteredAccounts = (List<JSONObject>) braineers.stream()
                        .filter(obj -> ((JSONObject) obj).get("username").toString().toLowerCase().contains(searchTerm))
                        .collect(Collectors.toList());

                DefaultTableModel model = (DefaultTableModel) leaderboardTable1.getModel();
                model.setRowCount(0);
                for (Object obj : filteredAccounts) {
                    JSONObject user = (JSONObject) obj;
                    model.addRow(new Object[]{user.get("username"), user.get("points")});
                }
            }
        });
    }

    private void searchAccount() {
        String searchTerm = find4.getText().trim().toLowerCase();
        if (searchTerm.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a username to search!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        List<JSONObject> filteredAccounts = (List<JSONObject>) braineers.stream()
                .filter(obj -> ((JSONObject) obj).get("username").toString().toLowerCase().contains(searchTerm))
                .collect(Collectors.toList());

        DefaultTableModel model = (DefaultTableModel) leaderboardTable1.getModel();
        model.setRowCount(0);
        for (Object obj : filteredAccounts) {
            JSONObject user = (JSONObject) obj;
            model.addRow(new Object[]{user.get("username"), user.get("points")});
        }
    }

    private void sortAccounts() {
        List<JSONObject> sortedAccounts = (List<JSONObject>) braineers.stream()
                .sorted((obj1, obj2) -> Integer.compare(
                        Integer.parseInt(((JSONObject) obj1).get("points").toString()),
                        Integer.parseInt(((JSONObject) obj2).get("points").toString())
                ))
                .collect(Collectors.toList());

        DefaultTableModel model = (DefaultTableModel) leaderboardTable1.getModel();
        model.setRowCount(0);
        for (Object obj : sortedAccounts) {
            JSONObject user = (JSONObject) obj;
            model.addRow(new Object[]{user.get("username"), user.get("points")});
        }
    }

    private void deleteAccount() {
        int selectedRow = leaderboardTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an account to delete!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String username = leaderboardTable1.getValueAt(selectedRow, 0).toString();
        braineers.removeIf(obj -> ((JSONObject) obj).get("username").equals(username));

        try (FileWriter writer = new FileWriter(filepath)) {
            JSONObject data = new JSONObject();
            data.put("users", new JSONObject());
            ((JSONObject) data.get("users")).put("braineers", braineers);
            writer.write(data.toJSONString());
            JOptionPane.showMessageDialog(this, "Account deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadAccounts();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error deleting account: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountAccess().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private keeptoo.KGradientPanel Accountaccess;
    private javax.swing.JButton ban;
    private javax.swing.JButton del1;
    private javax.swing.JTextField find4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable leaderboardTable1;
    private javax.swing.JButton search2;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
