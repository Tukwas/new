/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package brainbox;
//  importing packages

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

public class createQuiz extends javax.swing.JFrame {

    private static final String filepath = "C:\\Users\\User\\Documents\\NetBeansProjects\\brainBox\\src\\brainbox\\DataBase\\Bash.json";
    private JSONArray quizData; // Quiz data from JSON
    private DefaultTableModel quizTableModel;
    private Timer timer;
    private int countdownMinutes;
    private int countdownSeconds;
    private boolean isTimerRunning = false;
    private TakeQuiz takeQuizInstance;
    private boolean isFinalized = false;
    public createQuiz(String difficulty, int duration) {
    // Your constructor implementation
}

    public createQuiz() {
        initComponents();
        loadQuizData();
        initializeQuizTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Create = new keeptoo.KGradientPanel();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        jLabel2 = new javax.swing.JLabel();
        minute = new javax.swing.JTextField();
        second = new javax.swing.JTextField();
        start = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        createQuiz = new javax.swing.JTable();
        studentProg = new javax.swing.JProgressBar();
        add = new javax.swing.JButton();
        finalize = new javax.swing.JButton();
        del2 = new javax.swing.JButton();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        searchques = new javax.swing.JTextField();
        find2 = new javax.swing.JButton();
        create1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Create.setkEndColor(new java.awt.Color(206, 92, 165));
        Create.setkStartColor(new java.awt.Color(240, 122, 46));

        kGradientPanel3.setBackground(new java.awt.Color(255, 153, 51));
        kGradientPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        kGradientPanel3.setkEndColor(new java.awt.Color(240, 122, 46));
        kGradientPanel3.setkStartColor(new java.awt.Color(240, 122, 46));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Time Left:");

        minute.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        minute.setText("00");
        minute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minuteMouseClicked(evt);
            }
        });
        minute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minuteActionPerformed(evt);
            }
        });

        second.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        second.setText("00");
        second.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                secondMouseClicked(evt);
            }
        });
        second.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel3Layout = new javax.swing.GroupLayout(kGradientPanel3);
        kGradientPanel3.setLayout(kGradientPanel3Layout);
        kGradientPanel3Layout.setHorizontalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minute, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(second, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        kGradientPanel3Layout.setVerticalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(minute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(second, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        start.setBackground(new java.awt.Color(204, 102, 0));
        start.setForeground(new java.awt.Color(255, 255, 255));
        start.setText("Start");
        start.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        stop.setBackground(new java.awt.Color(204, 102, 0));
        stop.setForeground(new java.awt.Color(255, 255, 255));
        stop.setText("Stop");
        stop.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        createQuiz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Questions", "Answers", "Difficulty"
            }
        ));
        createQuiz.setRowHeight(50);
        jScrollPane3.setViewportView(createQuiz);

        studentProg.setBackground(new java.awt.Color(255, 255, 255));
        studentProg.setForeground(new java.awt.Color(204, 0, 153));

        add.setBackground(new java.awt.Color(204, 102, 0));
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("Add");
        add.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        finalize.setBackground(new java.awt.Color(204, 102, 0));
        finalize.setForeground(new java.awt.Color(255, 255, 255));
        finalize.setText("Finalized");
        finalize.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        finalize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizeActionPerformed(evt);
            }
        });

        del2.setBackground(new java.awt.Color(204, 102, 0));
        del2.setForeground(new java.awt.Color(255, 255, 255));
        del2.setText("Delete");
        del2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        del2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del2ActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Student Progress:");

        searchques.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        searchques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchquesActionPerformed(evt);
            }
        });

        find2.setBackground(new java.awt.Color(204, 102, 0));
        find2.setForeground(new java.awt.Color(255, 255, 255));
        find2.setText("Search");
        find2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        find2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find2ActionPerformed(evt);
            }
        });

        create1.setBackground(new java.awt.Color(204, 102, 0));
        create1.setForeground(new java.awt.Color(255, 255, 255));
        create1.setText("Back");
        create1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        create1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CreateLayout = new javax.swing.GroupLayout(Create);
        Create.setLayout(CreateLayout);
        CreateLayout.setHorizontalGroup(
            CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateLayout.createSequentialGroup()
                .addGroup(CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateLayout.createSequentialGroup()
                        .addGap(373, 373, 373)
                        .addComponent(finalize, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(CreateLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3)))
                .addContainerGap())
            .addGroup(CreateLayout.createSequentialGroup()
                .addGroup(CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(create1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CreateLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(CreateLayout.createSequentialGroup()
                                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(kGradientPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentProg, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateLayout.createSequentialGroup()
                        .addComponent(searchques, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(find2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(del2)
                        .addContainerGap())))
        );

        CreateLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {add, del2, find2});

        CreateLayout.setVerticalGroup(
            CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateLayout.createSequentialGroup()
                .addGroup(CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(create1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(kGradientPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CreateLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(studentProg, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(find2, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(searchques, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(del2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(finalize, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        CreateLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {add, del2, find2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Create, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Create, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minuteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minuteMouseClicked
        minute.setText("");
    }//GEN-LAST:event_minuteMouseClicked

    private void minuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minuteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minuteActionPerformed

    private void secondMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondMouseClicked
        second.setText("");
    }//GEN-LAST:event_secondMouseClicked

    private void secondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_secondActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed

    }//GEN-LAST:event_startActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed


    }//GEN-LAST:event_stopActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        addQuestion();
    }//GEN-LAST:event_addActionPerformed

    private void finalizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeActionPerformed
        finalizeQuiz();
    }//GEN-LAST:event_finalizeActionPerformed

    private void del2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del2ActionPerformed
        deleteQuestion();
    }//GEN-LAST:event_del2ActionPerformed

    private void find2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find2ActionPerformed
        searchQuestion();
    }//GEN-LAST:event_find2ActionPerformed

    private void create1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create1ActionPerformed
        this.dispose();
        String username = Login.uname; // Retrieve the username from the Login class
        BrainMaster ma = new BrainMaster(username); // Pass the username to the 
        this.dispose();
        ma.pack();
        ma.setVisible(true);
        ma.setLocationRelativeTo(null);

    }//GEN-LAST:event_create1ActionPerformed

    private void searchquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchquesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchquesActionPerformed

    private void loadQuizData() {
        try (FileReader reader = new FileReader(filepath)) {
            JSONParser parser = new JSONParser();
            JSONObject jsonData = (JSONObject) parser.parse(reader);
            quizData = (JSONArray) jsonData.get("quiz"); // Load only the "quiz" section
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading quiz data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            quizData = new JSONArray(); // Initialize an empty array if loading fails
        }
    }

    /**
     * Saves the updated quiz data back to the JSON file without removing other
     * content.
     */
    private void saveQuizData() {
        try (FileReader reader = new FileReader(filepath)) {
            JSONParser parser = new JSONParser();
            JSONObject jsonData = (JSONObject) parser.parse(reader);

            // Ensure users section is preserved
            if (!jsonData.containsKey("users")) {
                JOptionPane.showMessageDialog(this, "Error: 'users' section is missing in the JSON file.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Update only the "quiz" section
            jsonData.put("quiz", quizData);

            // Write back the entire JSON object
            try (FileWriter writer = new FileWriter(filepath)) {
                writer.write(jsonData.toJSONString());
                writer.flush();
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error saving quiz data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Initializes the quiz table with data from the JSON file.
     */
    private void initializeQuizTable() {
        quizTableModel = new DefaultTableModel(new String[]{"Questions", "Answers", "Difficulty", "Category", "Points"}, 0);
        createQuiz.setModel(quizTableModel);
        loadQuizIntoTable();
    }

    /**
     * Loads the quiz data into the JTable.
     */
    private void loadQuizIntoTable() {
        quizTableModel.setRowCount(0); // Clear existing rows
        for (Object obj : quizData) {
            JSONObject quiz = (JSONObject) obj;
            quizTableModel.addRow(new Object[]{
                quiz.get("question"),
                quiz.get("answer"),
                quiz.get("difficulty"),
                quiz.get("category"),
                quiz.get("points")
            });
        }
    }

    //--------------------------------------Features------------------------------------------------------------
    /**
     * Adds a new question to the quiz.
     */
    private void addQuestion() {
        if (isFinalized) {
            JOptionPane.showMessageDialog(this, "Quiz has been finalized. No further changes are allowed.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String question = JOptionPane.showInputDialog(this, "Enter the question:");
        String answer = JOptionPane.showInputDialog(this, "Enter the answer:");
        String difficulty = JOptionPane.showInputDialog(this, "Enter the difficulty (easy/medium/hard):");
        String category = JOptionPane.showInputDialog(this, "Enter the category:");
        String pointsStr = JOptionPane.showInputDialog(this, "Enter the points:");

        if (question == null || answer == null || difficulty == null || category == null || pointsStr == null
                || question.trim().isEmpty() || answer.trim().isEmpty() || difficulty.trim().isEmpty()
                || category.trim().isEmpty() || pointsStr.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int points = Integer.parseInt(pointsStr);
            if (points < 0) {
                JOptionPane.showMessageDialog(this, "Points must be a non-negative integer!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!difficulty.equalsIgnoreCase("easy") && !difficulty.equalsIgnoreCase("medium") && !difficulty.equalsIgnoreCase("hard")) {
                JOptionPane.showMessageDialog(this, "Difficulty must be one of: easy, medium, hard", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JSONObject newQuiz = new JSONObject();
            newQuiz.put("question", question.trim());
            newQuiz.put("answer", answer.trim());
            newQuiz.put("difficulty", difficulty.trim());
            newQuiz.put("category", category.trim());
            newQuiz.put("points", points);

            quizData.add(newQuiz);
            quizTableModel.addRow(new Object[]{question.trim(), answer.trim(), difficulty.trim(), category.trim(), points});
            saveQuizData();
            JOptionPane.showMessageDialog(this, "Question added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Points must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Deletes a selected quiz question.
     */
    private void deleteQuestion() {
        if (isFinalized) {
            JOptionPane.showMessageDialog(this, "Quiz has been finalized. No further changes are allowed.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int selectedRow = createQuiz.getSelectedRow();
        if (selectedRow != -1) {
            quizData.remove(selectedRow);
            quizTableModel.removeRow(selectedRow);
            saveQuizData();
            JOptionPane.showMessageDialog(this, "Question deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a question to delete!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Finalizes the quiz, preventing further changes.
     */
    private void finalizeQuiz() {
        isFinalized = true; // Set the quiz as finalized
        add.setEnabled(false); // Disable the Add button
        del2.setEnabled(false); // Disable the Delete button
        find2.setEnabled(false); // Disable the Search button
        JOptionPane.showMessageDialog(this, "Quiz has been finalized. No further changes are allowed.", "Finalized", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Searches for a question in the quiz.
     */
    private void searchQuestion() {
        String searchTerm = searchques.getText().trim().toLowerCase();
        if (searchTerm.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search term.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder results = new StringBuilder();
        for (int i = 0; i < createQuiz.getRowCount(); i++) {
            String question = createQuiz.getValueAt(i, 0).toString().toLowerCase(); // Column 0: Questions
            if (question.contains(searchTerm)) {
                results.append("Question: ").append(createQuiz.getValueAt(i, 0)).append("\n")
                        .append("Answer: ").append(createQuiz.getValueAt(i, 1)).append("\n") // Column 1: Answers
                        .append("Difficulty: ").append(createQuiz.getValueAt(i, 2)).append("\n") // Column 2: Difficulty
                        .append("Category: ").append(createQuiz.getValueAt(i, 3)).append("\n") // Column 3: Category
                        .append("Points: ").append(createQuiz.getValueAt(i, 4)).append("\n\n"); // Column 4: Points
            }
        }

        if (results.length() > 0) {
            JOptionPane.showMessageDialog(this, results.toString(), "Search Results", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No matching question found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createQuiz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private keeptoo.KGradientPanel Create;
    private javax.swing.JButton add;
    private javax.swing.JButton create1;
    private javax.swing.JTable createQuiz;
    private javax.swing.JButton del2;
    private javax.swing.JButton finalize;
    private javax.swing.JButton find2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private keeptoo.KGradientPanel kGradientPanel3;
    private javax.swing.JTextField minute;
    private javax.swing.JTextField searchques;
    private javax.swing.JTextField second;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    private javax.swing.JProgressBar studentProg;
    // End of variables declaration//GEN-END:variables
}
